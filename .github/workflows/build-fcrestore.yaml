name: Build FC Restore CLI

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build for All Platforms
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        run: |
          mkdir -p libs/fcrestore/dist
          cd libs/fcrestore
          OUTPUT=dist/fcrestore-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then OUTPUT="$OUTPUT.exe"; fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $OUTPUT .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fcrestore-${{ matrix.goos }}-${{ matrix.goarch }}
          path: libs/fcrestore/dist/fcrestore-${{ matrix.goos }}-${{ matrix.goarch }}*
          retention-days: 15

  create-pr:
    name: Create Pull Request for Metadata Update
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get artifact download URLs for current run
        id: get_artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          echo "Fetching artifacts for run $GITHUB_RUN_ID in $GITHUB_REPOSITORY"
          ARTIFACTS_JSON=$(curl -sSL \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts")

          echo "$ARTIFACTS_JSON" | \
            jq -c --argjson run_id "$GITHUB_RUN_ID" \
            '.artifacts[] | select(.workflow_run.run_id == $run_id) | {name: .name, url: .archive_download_url}' > artifacts_list.json

          echo "::set-output name=data::$(jq -s '.' artifacts_list.json)"

      - name: Generate libs/fcrestore/urls.json with artifact URLs
        run: |
          mkdir -p libs/fcrestore
          DATA='${{ steps.get_artifacts.outputs.data }}'
          echo "$DATA" > artifacts.json

          echo '{' > libs/fcrestore/urls.json

          echo '  "windows": {' >> libs/fcrestore/urls.json
          jq -r '.[] | select(.name|startswith("fcrestore-windows-")) | "\(.name) \(.url)"' artifacts.json | while read name url; do
            arch=${name#fcrestore-windows-}
            echo "    \"$arch\": \"$url\"," >> libs/fcrestore/urls.json
          done
          sed -i '$ s/,$//' libs/fcrestore/urls.json
          echo '  },' >> libs/fcrestore/urls.json

          echo '  "linux": {' >> libs/fcrestore/urls.json
          jq -r '.[] | select(.name|startswith("fcrestore-linux-")) | "\(.name) \(.url)"' artifacts.json | while read name url; do
            arch=${name#fcrestore-linux-}
            echo "    \"$arch\": \"$url\"," >> libs/fcrestore/urls.json
          done
          sed -i '$ s/,$//' libs/fcrestore/urls.json
          echo '  },' >> libs/fcrestore/urls.json

          echo '  "darwin": {' >> libs/fcrestore/urls.json
          jq -r '.[] | select(.name|startswith("fcrestore-darwin-")) | "\(.name) \(.url)"' artifacts.json | while read name url; do
            arch=${name#fcrestore-darwin-}
            echo "    \"$arch\": \"$url\"," >> libs/fcrestore/urls.json
          done
          sed -i '$ s/,$//' libs/fcrestore/urls.json
          echo '  }' >> libs/fcrestore/urls.json

          echo '}' >> libs/fcrestore/urls.json

      - name: Commit and push urls.json to new branch
        id: create_branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          BRANCH="update-fcrestore-urls-$(date +%s)"
          echo "Creating branch $BRANCH"

          git checkout -b $BRANCH

          git add libs/fcrestore/urls.json
          git commit -m "feat(fcrestore): Update Build url"
          git push --set-upstream origin $BRANCH

          echo "::set-output name=branch::$BRANCH"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'feat(fcrestore): Update Build url'
          title: Update fcrestore build URLs
          body: This PR updates `urls.json` with the latest build binaries URLs.
          base: main
          branch: ${{ steps.create_branch.outputs.branch }}
